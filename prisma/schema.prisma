datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  role          Role      @default(USER)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Role {
  ADMIN
  USER
}

model Store {
  id     Int    @id @default(1)
  name   String
  logo   String
  banner String
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  image     String
  createdAt DateTime @default(now())

  products Product[]
}

model Product {
  id              String  @id @default(cuid())
  name            String
  price           Int
  available       Boolean @default(true)
  number          Int     @default(0)
  rootImagePath   String
  firstImagePath  String?
  secondImagePath String?

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, categoryId])
}

model Order {
  id         String  @id @default(cuid())
  payment_id String  @unique
  name       String
  phone      String
  comments   String?
  address    String
  price      Int
  delivered  Boolean @default(false)
  status     String  @default("pending")
  info       Json

  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
